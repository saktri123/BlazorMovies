@using System.Timers;
@typeparam TItem;

<div class="blazored-typeahead">
    <div class="blazored-typeahead__controls">
        <input type="text" class="blazored-typeahead__input"
               autocomplete="off"
               placeholder="@Placeholder"
               @bind-value="@SearchText"
               @bind-value:event="oninput"
               @onclick="@ShowSuggestions"
               @onfocusout="onfocusout" />
    </div>
    @if (IsSearching)
    {
        <div class="blazored-typeahead__results">
            <div class="blazored-typeahead__result">
                <span>Loading..</span>
            </div>
        </div>
    }
    else if (ShouldShowSuggestions())
    {
        <div class="blazored-typeahead__results">
            @foreach (var item in Suggestions)
            {
                <div @key="item" class="blazored-typeahead__result" tabindex="0" 
                     @onmouseover="@onmouseoverSuggestion" @onmouseout="@onmouseoutSuggestion" @onclick="@(() => SelectSuggestion(item))">
                    @ResultTemplate(item)
                </div>
            }
        </div>
    }
    else if (ShowNotFound())
    {
        <div class="blazored-typeahead__results">
            <div class="blazored-typeahead__notfound">
                @if (NotFoundTemplate != null)
                {
                    @NotFoundTemplate
                }
                else
                {
                    <span>No Results Found</span>
                }
            </div>
        </div>
    }

</div>

@code {
        [Parameter] public string Placeholder { get; set; }
    private bool IsSearching = false;
    private bool IsShowingSuggestions = false;
    private string _searchText = "";
    private bool IsMouseOverSuggestion = false;
    [Parameter] public int MinimumLegth { get; set; } = 3;
    [Parameter] public int Debounce { get; set; } = 300;
    [Parameter] public Func<string, Task<IEnumerable<TItem>>> SearchMethod { get; set; }
    protected TItem[] Suggestions { get; set; } = new TItem[0];
    [Parameter] public RenderFragment<TItem> ResultTemplate { get; set; }
    [Parameter] public RenderFragment<TItem> NotFoundTemplate { get; set; }
    [Parameter] public EventCallback<TItem> ValueChanged { get; set; }

    private Timer _debounceTimer;

    protected override void OnInitialized()
    {
        _debounceTimer = new Timer();
        _debounceTimer.Interval = Debounce;
        _debounceTimer.AutoReset = false;
        _debounceTimer.Elapsed += Search;
        base.OnInitialized();
    }
    private string SearchText
    {
        get => _searchText;
        set
        {
            _searchText = value;
            if (value.Length == 0)
            {
                IsShowingSuggestions = false;
                _debounceTimer.Stop();
                Suggestions = new TItem[0];
            }
            else if (value.Length >= MinimumLegth)
            {
                _debounceTimer.Stop();
                _debounceTimer.Start();
            }
        }
    }
    private async void Search(object source, ElapsedEventArgs e)
    {
        IsSearching = true;
        IsShowingSuggestions = false;
        await InvokeAsync(StateHasChanged);

        Suggestions = (await SearchMethod.Invoke(_searchText)).ToArray();

        IsSearching = false;
        IsShowingSuggestions = true;
        await InvokeAsync(StateHasChanged);

    }

    private void ShowSuggestions()
    {
        if (Suggestions.Any())
        {
            IsShowingSuggestions = true;
        }
    }

    private bool ShouldShowSuggestions()
    {
        return IsShowingSuggestions && Suggestions.Any();
    }

    private void onfocusout()
    {
        if (!IsMouseOverSuggestion)
        {
            IsShowingSuggestions = false;
        }
    }
    private async Task SelectSuggestion(TItem item)
    {
        SearchText = "";
        await ValueChanged.InvokeAsync(item);
    }

    private bool ShowNotFound()
    {
        return !Suggestions.Any() && IsShowingSuggestions;
    }

    private void onmouseoverSuggestion() {
        IsMouseOverSuggestion = true;
    }

    private void onmouseoutSuggestion()
    {
        IsMouseOverSuggestion = false;
    }
}

