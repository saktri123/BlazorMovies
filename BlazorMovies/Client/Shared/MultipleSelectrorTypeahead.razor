@typeparam T

<CustomTypeahead SearchMethod="@((string searchString)=> SearchMethod(searchString))"
                 ValueChanged="@((T item)=> SelectedElement(item))">

    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</CustomTypeahead>
<ul class="list-group">
    @foreach (var item in SelectedElements)
    {
        <li draggable="true"
            @ondragstart="@(()=> HandleDragStart(item))"
            @ondragover="@(()=> HandleDragEnded(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span class="badge badge-primary badge-pill" style="cursor:pointer" @onclick="@(()=> SelectedElements.Remove(item))">X</span>
        </li>
    }
</ul>
@code {
    [Parameter] public List<T> SelectedElements { get; set; } = new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> MyResultTemplate { get; set; }
    [Parameter] public RenderFragment<T> MyListTemplate { get; set; }
    T draggedItem;

    private void SelectedElement(T item)
    {
        if (!SelectedElements.Any(x => x.Equals(item)))
        {
            SelectedElements.Add(item);
        }
    }

    private void HandleDragStart(T item)
    {
        draggedItem = item;
    }

    private void HandleDragEnded(T item)
    {
        if (!draggedItem.Equals(item))
        {
            var draggedElementIndex = SelectedElements.IndexOf(draggedItem);
            var elementIndex = SelectedElements.IndexOf(item);
            SelectedElements[elementIndex] = draggedItem;
            SelectedElements[draggedElementIndex] = item;
        }
    }

}
