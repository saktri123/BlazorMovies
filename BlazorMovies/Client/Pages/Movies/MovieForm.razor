<EditForm Model="movie" OnValidSubmit="OnValidDataAnotation">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText class="form-control" id="name" @bind-Value="movie.Name"></InputText>
        <ValidationMessage For="()=> movie.Name"></ValidationMessage>
    </div>

    <div class="form-group">
        <label for="intheaters">In Theaters:</label>
        <InputCheckbox id="intheaters" @bind-Value="movie.InTheaters"></InputCheckbox>
        <ValidationMessage For="()=> movie.InTheaters"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="trailer">Trailer:</label>
        <InputText class="form-control" id="trailer" @bind-Value="movie.Trailer"></InputText>
        <ValidationMessage For="()=> movie.Trailer"></ValidationMessage>
    </div>
    <div class="form-group">
        <label for="releaseDate">Release Date:</label>
        <InputDate class="form-control" id="releaseDate" @bind-Value="movie.ReleaseDate"></InputDate>
        <ValidationMessage For="()=> movie.ReleaseDate"></ValidationMessage>
    </div>
    <div class="form-group">
        <label>Poster Image</label>
        <InputImg Label="Picture" OnSelectedImage="OnSelectedImage" ImageURL="@imageUrl" />
        <ValidationMessage For="@(()=> movie.PosterImage)" />
    </div>
    <div class="form-group form-markdown">
        <InputMarkDown Label="Summary" @bind-Value="movie.Summary" For="()=> movie.Summary" />
    </div>
    <div class="form-group">
        <label>Gener:</label>
        <div>
            <MultipleSelect Selected="SelectedModel" NoSelected="NoSelectedModel" />
        </div>
    </div>
    <div class="form-group">
        <label>Actors:</label>
        <div>
            <MultipleSelectrorTypeahead Context="person" SearchMethod="@((string searchText)=>SearchMethod(searchText))"
                                        SelectedElements="SelectedActors">
                <MyResultTemplate>
                    <img style="width:50px;" src="@person.Picture" />
                    @person.Name
                </MyResultTemplate>
                <MyListTemplate>
                    <img style="width:15px;" src="@person.Picture" />
                    @person.Name / <input @bind-value="@person.Charachter" placeholder="Charcter" />
                </MyListTemplate>
            </MultipleSelectrorTypeahead>
        </div>
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</EditForm>

@code {
    [Parameter] public Movie movie { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public List<Gener> Selected { get; set; } = new List<Gener>();
    [Parameter] public List<Gener> NoSelected { get; set; } = new List<Gener>();
    private List<MultipleSelectModel> SelectedModel;
    private List<MultipleSelectModel> NoSelectedModel;
    private List<Person> SelectedActors { get; set; } = new List<Person>();
    //private Person person;
    private string imageUrl;

    protected override void OnInitialized()
    {
        SelectedModel = Selected.Select(x => new MultipleSelectModel(x.Id.ToString(), x.Name)).ToList();
        NoSelectedModel = NoSelected.Select(x => new MultipleSelectModel(x.Id.ToString(), x.Name)).ToList();
        if (!string.IsNullOrEmpty(movie.PosterImage))
            imageUrl = movie.PosterImage;
    }

    void OnSelectedImage(string base64Image)
    {

        movie.PosterImage = base64Image;
    }

    private async Task<IEnumerable<Person>> SearchMethod(string searchText)
    {
        if (searchText == "test")
        {
            return Enumerable.Empty<Person>();
        }
        else
        {
            return new List<Person> {
               new Person{Id=1, Name="Tom Holand", Picture="https://m.media-amazon.com/images/M/MV5BNTAzMzA3NjQwOF5BMl5BanBnXkFtZTgwMDUzODQ5MTI@._V1_UY317_CR23,0,214,317_AL__QL50.jpg" },
               new Person{Id=2, Name= "Tom Hanks", Picture="https://m.media-amazon.com/images/M/MV5BMTQ2MjMwNDA3Nl5BMl5BanBnXkFtZTcwMTA2NDY3NQ@@._V1_UY317_CR2,0,214,317_AL__QL50.jpg" }
            };

        }
    }

    private async Task OnValidDataAnotation()
    {
        movie.MovieGeners = SelectedModel.Select(x=> new MovieGener { GenerId = int.Parse(x.Key) }).ToList();

        movie.MoviesActors = SelectedActors.Select(x => new MoviesActors { PersonId = x.Id, Character = x.Charachter }).ToList();

        if (!string.IsNullOrEmpty(movie.PosterImage)) imageUrl = null;

        await OnValidSubmit.InvokeAsync(null);
    }
}

